/*
 * Copyright (c) 2011-2022 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.util.VersionNumber

buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id "java-platform"
	id "maven-publish"
	//applied in rootProject if credentials provided (see below):
	id "com.jfrog.artifactory" version "4.27.1" apply false
}

apply from: "gradle/releaser.gradle"

group = 'io.projectreactor'
description = 'Bill of materials to make sure a consistent set of versions is used for Reactor 3.'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	if (version.endsWith('-SNAPSHOT')) {
		mavenLocal()
		maven { url 'https://repo.spring.io/snapshot' }
	}
}

dependencies {
	constraints {
		// Reactive Streams
		api "org.reactivestreams:reactive-streams:$reactiveStreamsVersion"
		// Reactor Core
		api "io.projectreactor:reactor-core:$reactorCoreVersion"
		api "io.projectreactor:reactor-test:$reactorCoreVersion"
		api "io.projectreactor:reactor-tools:$reactorCoreVersion"
		api "io.projectreactor:reactor-core-micrometer:$reactorCoreMicrometerVersion"
		// Reactor Addons
		api "io.projectreactor.addons:reactor-extra:$reactorAddonsVersion"
		api "io.projectreactor.addons:reactor-adapter:$reactorAddonsVersion"
		// Reactor Netty 1.x for Netty 4.1
		api "io.projectreactor.netty:reactor-netty:$reactorNettyVersion"
		api "io.projectreactor.netty:reactor-netty-core:$reactorNettyVersion"
		api "io.projectreactor.netty:reactor-netty-http:$reactorNettyVersion"
		api "io.projectreactor.netty:reactor-netty-http-brave:$reactorNettyVersion"
		// Reactor Netty 2.x for Netty 5
		api "io.projectreactor.netty:reactor-netty5:$reactorNetty2Version"
		api "io.projectreactor.netty:reactor-netty5-core:$reactorNetty2Version"
		api "io.projectreactor.netty:reactor-netty5-http:$reactorNetty2Version"
		// Reactor Pool
		api "io.projectreactor.addons:reactor-pool:$reactorPoolVersion"
		//Reactor Kotlin Extensions
		api "io.projectreactor.kotlin:reactor-kotlin-extensions:$reactorKotlinExtensionsVersion"
		//Reactor Kafka should be compatible with both 2020 and 2022 release trains
		api "io.projectreactor.kafka:reactor-kafka:$reactorKafkaVersion"
	}
}


static def qualifyVersion(String v) {
	v = v.toUpperCase()
	if (v.startsWith("DYSPROSIUM")) {
		//old scheme
		def qualifier = v.replaceFirst("DYSPROSIUM-", "")
		if (qualifier == 'RELEASE') return "RELEASE"
		if (qualifier.matches("(?:SR)\\d+")) return "RELEASE" //old SR
		if (qualifier.matches("(?:M|RC)\\d+")) return "MILESTONE"
		if (qualifier == "BUILD-SNAPSHOT") return "SNAPSHOT"

		return "BAD"
	}
	//new scheme
	def versionNumber = VersionNumber.parse(v)
	if (versionNumber == VersionNumber.UNKNOWN) return "BAD";

	if (versionNumber.qualifier == null || versionNumber.qualifier.size() == 0) return "RELEASE" //new scheme
	if (versionNumber.qualifier.matches("(?:M|RC)\\d+")) return "MILESTONE"
	if (versionNumber.qualifier == "SNAPSHOT") return "SNAPSHOT"

	return "BAD"
}

task qualifyVersionGha() {
	doLast {
		def versionType = qualifyVersion("$version")

		println "::set-output name=versionType::$versionType"
		println "::set-output name=fullVersion::$version"
		if (versionType == "BAD") {
			println "::error ::Unable to parse $version to a VersionNumber with recognizable qualifier"
			throw new TaskExecutionException(tasks.getByName("qualifyVersionGha"), new IllegalArgumentException("Unable to parse $version to a VersionNumber with recognizable qualifier"))
		}
	}
}

publishing {
	repositories {
		maven {
			name = "mock"
			url = "${rootProject.buildDir}/mockRepo"
		}
		if (qualifyVersion("$version") == "RELEASE") {
			maven {
				name = "sonatype"
				url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
				credentials {
					username findProperty("sonatypeUsername")
					password findProperty("sonatypePassword")
				}
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			artifactId = 'reactor-bom'
			from components.javaPlatform
			pom {
				afterEvaluate {
					name = 'Project Reactor 3 Release Train - BOM'
					description = project.description
				}
				url = 'https://projectreactor.io'
				organization {
					name = 'reactor'
					url = 'https://github.com/reactor'
				}
				licenses {
					license {
						name = 'The Apache Software License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution = 'repo'
					}
				}
				scm {
					url = 'https://github.com/reactor/reactor'
					connection = 'scm:git:git://github.com/reactor/reactor'
					developerConnection = 'scm:git:git://github.com/reactor/reactor'
				}
				issueManagement {
					system = "GitHub Issues"
					url = "https://github.com/reactor"
				}
				developers {
					developer {
						id = 'simonbasle'
						name = 'Simon Basl√©'
						email = 'sbasle at vmware.com'
					}
					developer {
						id = 'violetagg'
						name = 'Violeta Georgieva'
						email = 'violetag at vmware.com'
					}
					developer {
						id = 'odokuka'
						name = 'Oleh Dokuka'
						email = 'odokuka at vmware.com'
					}
				}
			}
			versionMapping {
				usage('java-api') {
					fromResolutionResult()
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
}

if (rootProject.hasProperty("artifactory_publish_password")) {
	apply plugin: "com.jfrog.artifactory"

	artifactoryPublish {
		publications(publishing.publications.mavenJava)
	}
}

if (qualifyVersion("$version") in ["RELEASE", "MILESTONE"] || rootProject.hasProperty("forceSigning")) {
	apply plugin: 'signing'

	signing {
		//requiring signature if there is a publish task that is not to MavenLocal
		required {  gradle.taskGraph.allTasks.any { it.name.toLowerCase().contains("publish")	&& !it.name.contains("MavenLocal") } }
		def signingKey = findProperty("signingKey")
		def signingPassword = findProperty("signingPassword")

		useInMemoryPgpKeys(signingKey, signingPassword)

		afterEvaluate {
			sign publishing.publications.mavenJava
		}
	}
}